"""
Anonymous Confessions Telegram Bot with Moderation
==================================================

Installation:
pip install aiogram python-dotenv

Setup:
1. Create .env file with:
   BOT_TOKEN=your_bot_token_here
   MODERATION_CHAT_ID=-1001234567890
   TARGET_CHANNEL_ID=-1001234567890

2. Run:
   python main.py

Features:
- Fully anonymous (no data storage, no logs)
- Multi-language support (EN, UK, RU)
- Anti-spam protection
- Moderation system
- Direct messages only
"""

import asyncio
import os
import re
import time
from typing import Dict, Optional

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message, 
    CallbackQuery, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configuration
BOT_TOKEN = os.getenv('BOT_TOKEN')
MODERATION_CHAT_ID = int(os.getenv('MODERATION_CHAT_ID'))
TARGET_CHANNEL_ID = int(os.getenv('TARGET_CHANNEL_ID'))

# Bot initialization
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# In-memory storage for rate limiting (no persistent data)
user_last_message: Dict[int, float] = {}

# Very simple Multi-language support
# Maybe in fututre we will use i18n library

MESSAGES = {
    'en': {
        'start': 'ü§ê Send me your anonymous confession.\n\nYour message will be reviewed by moderators before publication. \n\nAnd posted here: @GhostNoteAnon',
        'sent_for_moderation': '‚úÖ Your message has been sent for moderation.',
        'approved': '‚úÖ Your confession has been published!',
        'rejected': '‚ùå Your confession was rejected by moderators.',
        'rate_limit': '‚è± Please wait 30 seconds before sending another message.',
        'invalid_length': 'üìù Message must be between 5 and 1000 characters.',
        'dm_only': 'üîí This bot works only in private messages.',
        'suspicious_content': '‚ö†Ô∏è Suspicious content detected.',
        'mod_new_confession': 'üìù New confession for review:',
        'mod_approve': '‚úÖ Approve',
        'mod_reject': '‚ùå Reject'
    },
    'uk': {
        'start': 'ü§ê –ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –≤–∞—à–µ –∞–Ω–æ–Ω—ñ–º–Ω–µ –∑—ñ–∑–Ω–∞–Ω–Ω—è.\n\n–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –ø–µ—Ä–µ–¥ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—î—é.\n\n–¢–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ —Ç—É—Ç: @GhostNoteAnon',
        'sent_for_moderation': '‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.',
        'approved': '‚úÖ –í–∞—à–µ –∑—ñ–∑–Ω–∞–Ω–Ω—è –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!',
        'rejected': '‚ùå –í–∞—à–µ –∑—ñ–∑–Ω–∞–Ω–Ω—è –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.',
        'rate_limit': '‚è± –ó–∞—á–µ–∫–∞–π—Ç–µ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.',
        'invalid_length': 'üìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 5 –¥–æ 1000 —Å–∏–º–≤–æ–ª—ñ–≤.',
        'dm_only': 'üîí –¶–µ–π –±–æ—Ç –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö.',
        'suspicious_content': '‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω–æ –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏–π –≤–º—ñ—Å—Ç.',
        'mod_new_confession': 'üìù –ù–æ–≤–µ –∑—ñ–∑–Ω–∞–Ω–Ω—è –Ω–∞ —Ä–æ–∑–≥–ª—è–¥:',
        'mod_approve': '‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏',
        'mod_reject': '‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏'
    },
    'ru': {
        'start': 'ü§ê –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ.\n\n–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π.\n\n–ò –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Ç—É—Ç: @GhostNoteAnon',
        'sent_for_moderation': '‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.',
        'approved': '‚úÖ –í–∞—à–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!',
        'rejected': '‚ùå –í–∞—à–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.',
        'rate_limit': '‚è± –ü–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.',
        'invalid_length': 'üìù –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 5 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤.',
        'dm_only': 'üîí –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.',
        'suspicious_content': '‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.',
        'mod_new_confession': 'üìù –ù–æ–≤–æ–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ:',
        'mod_approve': '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å',
        'mod_reject': '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å'
    }
}

def get_user_language(language_code: Optional[str]) -> str:
    """Determine user language based on language_code"""
    if not language_code:
        return 'en'
    
    lang = language_code.lower()
    if lang.startswith('uk'):
        return 'uk'
    elif lang.startswith('ru'):
        return 'ru'
    else:
        return 'en'

def get_message(lang: str, key: str) -> str:
    """Get localized message"""
    return MESSAGES.get(lang, MESSAGES['en']).get(key, MESSAGES['en'][key])

def is_suspicious_content(text: str) -> bool:
    """Check if message contains suspicious content"""
    # Check for URLs
    if re.search(r'http[s]?://|www\.|t\.me/|@\w+', text, re.IGNORECASE):
        return True
    
    # Check if message is mostly emojis
    emoji_count = len(re.findall(r'[\U0001F600-\U0001F64F\U0001F300-\U0001F5FF\U0001F680-\U0001F6FF\U0001F1E0-\U0001F1FF\U00002702-\U000027B0\U000024C2-\U0001F251]', text))
    if emoji_count > len(text) * 0.3:
        return True
    
    # Check for repeated characters/words
    if re.search(r'(.)\1{4,}', text) or re.search(r'\b(\w+)\s+\1\b', text, re.IGNORECASE):
        return True
    
    return False

def check_rate_limit(user_id: int) -> bool:
    """Check if user is rate limited (30 seconds)"""
    # This is not good idea. 
    # We need another approach
    current_time = time.time()
    last_message_time = user_last_message.get(user_id, 0)
    
    if current_time - last_message_time < 30:
        return True
    
    user_last_message[user_id] = current_time
    return False

@dp.message(CommandStart())
async def start_command(message: Message):
    """Handle /start command"""
    # Only work in private chats
    if message.chat.type != 'private':
        return
    
    lang = get_user_language(message.from_user.language_code)
    await message.answer(get_message(lang, 'start'))

@dp.message(F.chat.type == 'private')
async def handle_confession(message: Message):
    """Handle confession messages in private chat"""
    user_id = message.from_user.id
    text = message.text
    
    if not text:
        return
    
    lang = get_user_language(message.from_user.language_code)
    
    # Check message length
    if len(text) < 5 or len(text) > 1000:
        await message.answer(get_message(lang, 'invalid_length'))
        return
    
    # Check rate limit
    if check_rate_limit(user_id):
        await message.answer(get_message(lang, 'rate_limit'))
        return
    
    # Check for suspicious content
    if is_suspicious_content(text):
        return  # Silently ignore suspicious content
    
    # Send to moderation
    await send_to_moderation(text, user_id, lang)
    await message.answer(get_message(lang, 'sent_for_moderation'))

async def send_to_moderation(confession_text: str, user_id: int, user_lang: str):
    """Send confession to moderation chat"""
    # Create callback data with user info (temporary, in memory only)
    callback_data_approve = f"approve_{user_id}_{user_lang}_{int(time.time())}"
    callback_data_reject = f"reject_{user_id}_{user_lang}_{int(time.time())}"
    
    # Moderation keyboard
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ Approve",
                callback_data=callback_data_approve
            ),
            InlineKeyboardButton(
                text="‚ùå Reject", 
                callback_data=callback_data_reject
            )
        ]
    ])
    
    # Format message for moderators
    mod_message = f"üìù New confession for review:\n\n{confession_text}\n\nüë§ User Language: {user_lang.upper()}"
    
    # Send to moderation chat
    await bot.send_message(
        chat_id=MODERATION_CHAT_ID,
        text=mod_message,
        reply_markup=keyboard
    )

@dp.callback_query(F.data.startswith(('approve_', 'reject_')))
async def handle_moderation(callback: CallbackQuery):
    """Handle moderation decisions"""
    data_parts = callback.data.split('_')
    action = data_parts[0]  # approve or reject
    user_id = int(data_parts[1])
    user_lang = data_parts[2]
    timestamp = data_parts[3]
    
    # Extract confession text from the callback message
    confession_text = callback.message.text
    # Remove the moderation header to get clean confession
    confession_lines = confession_text.split('\n')
    clean_confession = '\n'.join(confession_lines[2:-2])  # Remove header and footer
    
    if action == 'approve':
        # Publish to target channel
        await bot.send_message(
            chat_id=TARGET_CHANNEL_ID,
            text=clean_confession
        )
        
        # Notify user
        try:
            await bot.send_message(
                chat_id=user_id,
                text=get_message(user_lang, 'approved')
            )
        except:
            pass  # User might have blocked the bot
        
        # Update moderation message
        await callback.message.edit_text(
            f"‚úÖ APPROVED\n\n{confession_text}",
            reply_markup=None
        )
        
    elif action == 'reject':
        # Notify user
        try:
            await bot.send_message(
                chat_id=user_id,
                text=get_message(user_lang, 'rejected')
            )
        except:
            pass  # User might have blocked the bot
        
        # Update moderation message
        await callback.message.edit_text(
            f"‚ùå REJECTED\n\n{confession_text}",
            reply_markup=None
        )
    
    await callback.answer()

@dp.message()
async def handle_non_private(message: Message):
    """Handle messages in non-private chats"""
    if message.chat.type != 'private':
        lang = get_user_language(message.from_user.language_code)
        await message.answer(get_message(lang, 'dm_only'))

async def main():
    """Main bot function"""
    # Start polling
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())